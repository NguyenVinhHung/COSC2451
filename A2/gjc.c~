/****************************************************************************
* COSC2541 - Programming Techniques
* Semester 3 2012 Assignment #2
* Full Name        : Nguyen Vinh Hung
* Student Number   : s3342128
* Start up code provided by Christopher Hoobin, Xiaodong Li and Quang Tran
****************************************************************************/

#include <string.h>

#include "gjc.h"
#include "gjc_options.h"
#include "gjc_utility.h"

int main(int argc, char* argv[])
{
    GJCType gjc;

    int initFlag, dataFlag;
    int option;

    /* Check the number of arguments from the command line. */
    if(argc != 3)
    {
        printf("PLease enter a command line with format:\n");
	printf("./gjc <menufile> <submenufile>\n");
	printf("Program abort\n");
	exit(EXIT_SUCCESS);
    }

    /* Initialise the Gloria Jean's Coffee system to a safe empty state. */
    initFlag = systemInit(&gjc);

    /* Populate the Gloria Jean's Coffee system with data from the data files.*/
    /* Uncomment this line when you are ready to use command line arguments: */
    dataFlag = loadData(&gjc, argv[1], argv[2]);

    /* Testing to see if both systemInit(.) and loadData(.) are ok */
    if (initFlag == FAILURE || dataFlag == FAILURE)
    {
        printf("Program abort.\n");
        exit(EXIT_FAILURE);
    }

    printf("\n\nCheck: %d\n\n", atoi(strtok("C0012", "C")));


    /* Interactive menu providing user with access to the 9 menu options */
    do
    {		
	displayMenu();
	option = inputOption();		

	if(option == FAILURE)
	{
	    printf("This option is invalid.\n");
	    printf("Please enter a valid option, which is from 1 to 9\n\n");
            continue;
	}

	switch(option)
	{
	    case 1: displaySummary(&gjc, 'H'); break;
            case 2: displaySummary(&gjc, 'C'); break;
	    case 3: categoryReport(&gjc); break;
	    case 4: addCategory(&gjc); break;
	    case 5: deleteCategory(&gjc); break;
	    case 6: addItem(&gjc); break;
            case 7: deleteItem(&gjc); break;
	    case 8: saveData(&gjc, argv[1], argv[2]); break;
	    case 9: exit(EXIT_SUCCESS);
        }
    } while(option != 9);

    /* Deallocate all dynamically allocated memory. */
    systemFree(&gjc);

    exit(EXIT_SUCCESS);

}
